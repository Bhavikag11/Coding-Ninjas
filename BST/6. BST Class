#include <iostream>
using namespace std;

template <typename T>
class BinaryTreeNode {
   public:
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

#include "solution.h"
/**********************************************************

	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public: 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this->data = data;
        	left = NULL;
        	right = NULL;
    	}
	};
	
***********************************************************/

class BST {
    // Define the data members
	BinaryTreeNode<int> *root;
   public:
    BST() { 
        // Implement the Constructor
        root = NULL; 
    }

	/*----------------- Public Functions of BST -----------------*/

    private:
    BinaryTreeNode<int>* minValueFromRightSide(BinaryTreeNode<int>* root){
        BinaryTreeNode<int>* temp;
        temp = root;
        while(temp->left != NULL)
            temp = temp->left;
        return temp;
    }
   	BinaryTreeNode<int>* remove2(BinaryTreeNode<int>* root,int k){
        
        if(root == NULL)
            return NULL;
        if(k > root->data)
            root->right = remove2(root->right,k);
        else if(k < root->data)
            root->left = remove2(root->left,k);
        else{
            if(root->left == NULL && root->right == NULL){ //right child exists
                delete root;
                return NULL;
            }
            else if (root->left == NULL){
                BinaryTreeNode<int>* temp=root->right;
                root->right = NULL;
                delete root;
                return temp;
            }
            else if(root->right == NULL){
                BinaryTreeNode<int>* temp = root->left;
                root->left = NULL;
                delete root;
                return temp;
            }
            else{
                BinaryTreeNode<int>* minNode = minValueFromRightSide(root->right);
                int rightMin = minNode->data;
                root->data = rightMin;
                root->right = remove2(root->right,rightMin);
                return root;
            }        
        }
    }
    
    public:
    void remove(int data) { 
        // Implement the remove() function 
        root = remove2(root,data);
    }
    
    void print2(BinaryTreeNode<int>* root){
        if(root == NULL)
            return;
        cout<<root->data<<":";
        if(root->left)
            cout<<"L:"<<root->left->data<<",";
        if(root->right)                
            cout<<"R:"<<root->right->data;
        cout<<endl;
        if(root->left)
            print2(root->left);
        if(root->right) 
            print2(root->right);
    }

    void print() { 
        // Implement the print() function
        if(root != NULL)
            print2(root);
    }
/*
    private:
    BinaryTreeNode<int>* insert2(BinaryTreeNode<int> *root , int data){
        if (root == NULL){
            BinaryTreeNode<int>* root2 = new BinaryTreeNode<int>(data);
            return root2;
        }  
    	if (data > root->data)
                root->right = insert2(root->right, data);
    	if(data<=root->data)
                root->left = insert2(root->left, data);
        return root;   	 
    }
    public:
    void insert(int data) { 
        // Implement the insert() function
		root = insert2(root,data);
    }
*/
    public:
     void insert(int data)
    {
        this->root=insert(data,this->root);	
	}
	private:
		BinaryTreeNode<int>* insert(int data,BinaryTreeNode<int>* node)
		{
			if(node==NULL)
			{
				BinaryTreeNode<int>* newnode=new BinaryTreeNode<int>(data);
				return newnode;
			}
			if(data<node->data)
			{
				node->left=insert(data,node->left);
			}
			else
			{
				node->right=insert(data,node->right);
			}
			return node;
		}
    private:
    bool searchInBST(BinaryTreeNode<int> *root , int k) {
        if(root == NULL)
            return NULL;
        if(root->data == k)
            return true;
        if((root->data)<k)
            return searchInBST(root->right,k);
        if((root->data)>k)
            return searchInBST(root->left,k);
        return false;
	}
    public:
    bool search(int data) {
		// Implement the search() function 
        return searchInBST(root,data);
    }
};
int main() {
    BST *tree = new BST();
    int choice, input, q;
    cin >> q;
    while (q--) {
        cin >> choice;
        switch (choice) {
            case 1:
                cin >> input;
                tree->insert(input);
                break;
            case 2:
                cin >> input;
                tree->remove(input);
                break;
            case 3:
                cin >> input;
                cout << ((tree->search(input)) ? "true\n" : "false\n");
                break;
            default:
                tree->print();
                break;
        }
    }
}
