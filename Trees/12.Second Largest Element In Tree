#include <iostream>
#include <queue>
#include <vector>
#include <climits>
using namespace std;

template <typename T>
class TreeNode {
   public:
    T data;
    vector<TreeNode<T>*> children;

    TreeNode(T data) { this->data = data; }

    ~TreeNode() {
        for (int i = 0; i < children.size(); i++) {
            delete children[i];
        }
    }
};

#include "solution.h"

TreeNode<int>* takeInputLevelWise() {
    int rootData;
    cin >> rootData;
    TreeNode<int>* root = new TreeNode<int>(rootData);

    queue<TreeNode<int>*> pendingNodes;

    pendingNodes.push(root);
    while (pendingNodes.size() != 0) {
        TreeNode<int>* front = pendingNodes.front();
        pendingNodes.pop();
        int numChild;
        cin >> numChild;
        for (int i = 0; i < numChild; i++) {
            int childData;
            cin >> childData;
            TreeNode<int>* child = new TreeNode<int>(childData);
            front->children.push_back(child);
            pendingNodes.push(child);
        }
    }

    return root;
}
/************************************************************

    Following is the structure for the TreeNode class

    template <typename T>
    class TreeNode {
     public:
        T data;
        vector<TreeNode<T>*> children;

        TreeNode(T data) {
            this->data = data;
        }

        ~TreeNode() {
            for (int i = 0; i < children.size(); i++) {
                delete children[i];
            }
        }
    };

************************************************************/

void secondLargestUtil(TreeNode<int>* root, TreeNode<int>** first,TreeNode<int>** second) 
{ 
    if (root == NULL) 
        return; 
    if (!(*first)) 
        *first = root;
    else if (root->data > (*first)->data) { 
        *second = *first; 
        *first = root; 
    }  
    else if (!(*second)) { 
        if (root->data < (*first)->data) { 
            *second = root; 
        } 
    } 
    else if (root->data < (*first)->data && root->data > (*second)->data) 
        *second = root; 
  
    int numChildren = root->children.size(); 
    for (int i = 0; i < numChildren; i++) 
        secondLargestUtil(root->children[i], first, second); 
} 


TreeNode<int>* getSecondLargestNode(TreeNode<int>* root) {
    // Write your code here
    
    TreeNode<int>* second = NULL;
    TreeNode<int>* first = NULL; 
    secondLargestUtil(root, &first, &second); 
  
    if (second == NULL) 
        return NULL; 
    return second; 
    
}
int main() {
    TreeNode<int>* root = takeInputLevelWise();

    TreeNode<int>* ans = getSecondLargestNode(root);

    if (ans != NULL) {
        cout << ans->data;
    } else {
        cout << INT_MIN;
    }

}
