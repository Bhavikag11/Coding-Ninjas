#include <iostream>
#include <climits>
using namespace std;

#include "solution.h"
#include <vector>

class PriorityQueue {
    vector<int> pq;

   public:
    bool isEmpty() { 
        return pq.size() == 0; 
    }

    int getSize() { 
        return pq.size(); 
    }

    int getMin() {
        if (isEmpty()) {
            return 0;
        }

        return pq[0];
    }

    void insert(int element) {
        pq.push_back(element);

        int childIndex = pq.size() - 1;

        while (childIndex > 0) {
            int parentIndex = (childIndex - 1) / 2;

            if (pq[childIndex] < pq[parentIndex]) {
                int temp = pq[childIndex];
                pq[childIndex] = pq[parentIndex];
                pq[parentIndex] = temp;
            } else {
                break;
            }

            childIndex = parentIndex;
        }
    }

    int removeMin() {
        // Write your code here
        
        if(pq.size() == 0){
            return 0;
        }
        int ans = pq[0];
        pq[0] = pq[pq.size() - 1];
        pq.pop_back();
        
        int parentIndex = 0;
        int rightIndex = (2*parentIndex)+2;
        int leftIndex = (2*parentIndex)+1;
        
        while(leftIndex < pq.size()){
            
            int minIndex = parentIndex;
            
            if(pq[minIndex] > pq[leftIndex])
                minIndex = leftIndex;

            if(pq[minIndex] > pq[rightIndex] && rightIndex < pq.size())
                minIndex = rightIndex;
            
            if(minIndex == parentIndex)
                break;
        
            int temp = pq[minIndex];
            pq[minIndex] = pq[parentIndex];
           	pq[parentIndex] = temp;
            
            parentIndex = minIndex;
            rightIndex = (2*parentIndex)+2;
            leftIndex = (2*parentIndex)+1;
        }
        
        return ans;
        
    }
};
int main() {
    PriorityQueue pq;

    int choice;
    cin >> choice;

    while (choice != -1) {
        switch (choice) {
            case 1:  // insert
                int element;
                cin >> element;
                pq.insert(element);
                break;
            case 2:  // getMin
                cout << pq.getMin() << "\n";
                break;
            case 3:  // removeMax
                cout << pq.removeMin() << "\n";
                break;
            case 4:  // size
                cout << pq.getSize() << "\n";
                break;
            case 5:  // isEmpty
                cout << (pq.isEmpty() ? "true\n" : "false\n");
            default:
                return 0;
        }
        
        cin >> choice;
    }
}
