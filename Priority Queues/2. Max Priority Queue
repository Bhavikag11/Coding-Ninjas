#include <iostream>
using namespace std;

#include "solution.h"
#include<vector>
#include <bits/stdc++.h>

class PriorityQueue {
    // Declare the data members here
	
	vector<int> pq;
   public:
    PriorityQueue() {
        // Implement the constructor here
    }

    /**************** Implement all the public functions here ***************/

    void insert(int element) {
        // Implement the insert() function here

        pq.push_back(element);
        int childIndex = pq.size()-1; 
        
        while(childIndex > 0){
            int parentIndex = childIndex/2;
            if(pq[parentIndex] < pq[childIndex]){
                int temp = pq[parentIndex];
                pq[parentIndex] = pq[childIndex];
                pq[childIndex] = temp;
                
            }
            else{
                break;
            }
            childIndex = parentIndex;
        }
    }

    int getMax() {
        // Implement the getMax() function here
        if(pq.size() == 0)
            return INT_MAX;
        else
            return pq[0];
    }

    int removeMax() {
        // Implement the removeMax() function here
        if(pq.size() == 0)
            return INT_MAX;
       
        int ans = pq[0];
        pq[0] = pq[pq.size() - 1];
        pq.pop_back();
        
        int parentIndex = 0;
        int rightIndex = (2*parentIndex)+2;
        int leftIndex = (2*parentIndex)+1;
        
        while(leftIndex < pq.size()){
            
            int minIndex = parentIndex;
            
            if(pq[minIndex] < pq[leftIndex])
                minIndex = leftIndex;

            if(pq[minIndex] < pq[rightIndex] && rightIndex < pq.size())
                minIndex = rightIndex;
            
            if(minIndex == parentIndex)
                break;
        
            int temp = pq[minIndex];
            pq[minIndex] = pq[parentIndex];
           	pq[parentIndex] = temp;
            
            parentIndex = minIndex;
            rightIndex = (2*parentIndex)+2;
            leftIndex = (2*parentIndex)+1;
        }
        
        return ans;
    }

    int getSize() { 
        // Implement the getSize() function here
        return pq.size();
    }

    bool isEmpty() {
        // Implement the isEmpty() function here
        return pq.size() == 0;
    }

};

int main() {
    PriorityQueue pq;
    int choice;
    cin >> choice;

    while (choice != -1) {
        switch (choice) {
            case 1:  // insert
                int element;
                cin >> element;
                pq.insert(element);
                break;
            case 2:  // getMax
                cout << pq.getMax() << "\n";
                break;
            case 3:  // removeMax
                cout << pq.removeMax() << "\n";
                break;
            case 4:  // size
                cout << pq.getSize() << "\n";
                break;
            case 5:  // isEmpty
                cout << (pq.isEmpty() ? "true\n" : "false\n");
            default:
                return 0;
        }
        
        cin >> choice;
    }
}
